@page "/puzzle/{year}/{day}"
@page "/puzzle/{day}"
@page "/puzzle"

@if (SolutionMetadata == null)
{
    <MudText Typo="Typo.h3">Day @Day (no solution available)</MudText>
}
else
{
    <MudText Typo="Typo.h3">Day @SolutionMetadata.Day - @SolutionMetadata.Title</MudText>
    <MudGrid>
        <MudItem xs="2">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" Style="height: 100%" OnClick="@SolveAsync">Solve</MudButton>
        </MudItem>
        <MudItem xs="10">
            <MudGrid>
                @{ var isProgressBarRendered = false; }
                @foreach (var (result, number) in Results.Select((x, i) => (x, i + 1)))
                {
                    <MudItem xs="2">
                        <MudText>Part @number:</MudText>
                    </MudItem>
                    <MudItem xs="10">
                        @switch (result)
                        {
                            case string text when text.Contains(Environment.NewLine):
                                var lines = text.Split(Environment.NewLine, StringSplitOptions.RemoveEmptyEntries);
                                <MudTextField T="string" 
                                             Value="@result.ToString()" 
                                             Lines="@(lines.Length + 1)" 
                                             ReadOnly="true"
                                             Variant="Variant.Outlined"
                                             Style="font-family: 'Source Code Pro', monospace; line-height: 12px; font-size: 14px; font-weight: bold;" />
                                break;
                            case string:
                                <MudTextField T="string" Value="@result.ToString()" ReadOnly="true" Variant="Variant.Outlined" />
                                break;
                            case TaskCanceledException:
                                <MudText>Canceled.</MudText>
                                break;
                            case NotImplementedException:
                                <MudText>Not implemented.</MudText>
                                break;
                            case Exception exception:
                                <MudText Color="Color.Error">Error - @exception.Message (@exception.GetType().Name)</MudText>
                                break;
                            case null when IsWorking && !isProgressBarRendered:
                                isProgressBarRendered = true;
                                <div style="width: 200px; height: 2em">
                                    @if (Progress.Percentage > 0)
                                    {
                                        <MudProgressLinear Value="@Progress.Percentage" />
                                    }
                                    else
                                    {
                                        <MudProgressLinear Indeterminate="true" />
                                    }
                                </div>
                                break;
                            case null when IsWorking && isProgressBarRendered:
                                <MudText>Waiting...</MudText>
                                break;
                            default:
                                <MudText>no result.</MudText>
                                break;
                        }
                    </MudItem>
                }
            </MudGrid>
        </MudItem>
    </MudGrid>

    <TabControl OnActivatePage="VisualizerHandler.CancelAllVisualizations">
        <TabPage Name="Visualization" IsVisible="SolutionMetadata != null && VisualizerHandler.GetVisualizer(SolutionMetadata.Type) != null" IsActive>
            @if (IsWorking)
            {
                <MudText>Calculating...</MudText>
            }
            else if (SolutionInstance == null)
            {
                <MudText>Click 'Solve' to see the visualization!</MudText>
            }
            else
            {
                <DynamicVisualizer SolutionInstance="SolutionInstance"></DynamicVisualizer>
            }
        </TabPage>
        <TabPage Name="Input">
            <div style="margin-top: 1em;">&nbsp;</div>
            @if (HasInputChanged)
            {
                <MudButton OnClick="@ReloadInput" Style="margin-bottom: 1em;" Disabled="@(IsWorking)" Variant="Variant.Filled">
                    Restore original input
                </MudButton>
            }
            <MudTextField T="string"
                          Value="@Input"
                          ValueChanged="@SetInput"
                          Lines="@((Input?.Split('\n').Length ?? 0) + 1)"
                          FullWidth="true"
                          Disabled="@IsWorking"
                          Placeholder="Enter your puzzle input here."
                          Variant="Variant.Outlined" />
        </TabPage>
        <TabPage Name="Source">
            <pre style="margin-top: 2em; font-family: 'Source Code Pro', monospace; font-size: 14px;">@SourceCode</pre>
        </TabPage>
    </TabControl>
}

@code
{
    private async Task ReloadInput(MouseEventArgs e)
    {
        await LoadInputAsync(true);
    }

    private void SetInput(string value)
    {
        Input = value;
        HasInputChanged = true;
        StateHasChanged();
    }
}
